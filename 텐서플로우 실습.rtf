{\rtf1\ansi\ansicpg949\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red25\green85\blue169;\red27\green31\blue34;
\red255\green255\blue255;\red203\green35\blue57;\red6\green33\blue79;\red218\green76\blue12;\red7\green68\blue184;
\red21\green23\blue26;\red91\green40\blue180;\red87\green96\blue106;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c11765\c41961\c72157;\cssrgb\c14118\c16078\c18039;
\cssrgb\c100000\c100000\c100000;\cssrgb\c84314\c22745\c28627;\cssrgb\c1176\c18431\c38431;\cssrgb\c89020\c38431\c3529;\cssrgb\c0\c36078\c77255;
\cssrgb\c10588\c12157\c13725\c29804;\cssrgb\c43529\c25882\c75686;\cssrgb\c41569\c45098\c49020;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10340\viewh10480\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs32 \cf0 \'bc\'b3\'c4\'a1 \'c2\'fc\'b0\'ed {\field{\*\fldinst{HYPERLINK "https://meisteruser.net/devflow/1863"}}{\fldrslt https://meisteruser.net/devflow/1863}}\
\'bb\'e8\'c1\'a6 
\b \cf2 \expnd0\expndtw0\kerning0
rm -r ~/tensorflow
\b0 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab720\sl260\partightenfactor0

\b \cf2 \expnd0\expndtw0\kerning0
\'c5\'d9\'bc\'ad\'c7\'c3\'b7\'ce\'bf\'ec \'bd\'c7\'c7\'e0\'c7\'cf\'b1\'e2\

\b0 source ~/tensorflow/bin/activate\
\

\b \'ba\'f1\'c8\'b0\'bc\'ba\'c8\'ad
\b0  : deactivate\
\

\b Python \'bf\'a1\'bc\'ad import \'c7\'cf\'b4\'c2 \'b9\'fd \

\b0 Import tensor flow as tf\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \kerning1\expnd0\expndtw0 Data flow graph => \'b3\'eb\'b5\'e5\'b5\'e9\'c0\'cc \'bf\'ac\'bb\'ea(operations)\'c0\'cc\'b0\'ed \'bf\'a7\'c1\'f6\'b4\'c2 \'b5\'a5\'c0\'cc\'c5\'cd(tensors)\
\'be\'ee\'b6\'b2 \'bf\'ac\'bb\'ea\'c0\'cc \'c0\'cf\'be\'ee\'b3\'aa\'bc\'ad \'b3\'bb\'b0\'a1 \'bf\'f8\'c7\'cf\'b4\'c2 \'b0\'e1\'b0\'fa\'b9\'b0\'c0\'bb \'be\'f2\'b0\'c5\'b3\'aa \'c0\'db\'be\'f7\'c0\'bb \'c7\'d2 \'bc\'f6 \'c0\'d6\'b4\'c2 \'b0\'cd\
\
\
\pard\pardeftab720\sl360\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/hunkim/DeepLearningZeroToAll"}}{\fldrslt \cf3 \expnd0\expndtw0\kerning0
https://github.com/hunkim/DeepLearningZeroToAll}}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs48 \cf0 1. \'b8\'d3\'bd\'c5\'b7\'af\'b4\'d7\'c0\'c7 \'b0\'b3\'b3\'e4\'b0\'fa \'bf\'eb\'be\'ee\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs32 \cf0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b \cf0 \'b3\'eb\'b5\'e5 \'b8\'b8\'b5\'e9\'be\'ee\'bc\'ad \'bd\'c7\'c7\'e0\'c7\'cf\'b4\'c2 \'b9\'e6\'b9\'fd\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b0 \cf0 \'b3\'eb\'b5\'e5\'c0\'cc\'b8\'a7 = tf.constant(\'b3\'eb\'b5\'e5\'b0\'aa) \'b3\'eb\'b5\'e5 \'b8\'b8\'b5\'e5\'b4\'c2 \'b0\'cd\
\'bc\'bc\'bc\'c7\'c0\'cc\'b8\'a7 = tf.Session() \'bc\'bc\'bc\'c7 \'b8\'b8\'b5\'e9\'b0\'ed\
print(\'bc\'bc\'bc\'c7\'c0\'cc\'b8\'a7.run(\'bd\'c7\'c7\'e0\'bd\'c3\'c5\'b0\'b0\'ed\'c0\'da \'c7\'cf\'b4\'c2 \'b3\'eb\'b5\'e5)) \'bd\'c7\'c7\'e0\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b \cf0 \'b1\'d7\'b7\'a1\'c7\'c1 \'b8\'b8\'b5\'e9\'be\'ee \'b3\'f5\'b0\'ed \'bd\'c7\'c7\'e0\'bd\'c3\'c5\'b0\'b4\'c2 \'b4\'dc\'b0\'e8\'bf\'a1\'bc\'ad \'b0\'aa\'c0\'bb \'b4\'f8\'c1\'ae\'c1\'d6\'b0\'ed \'bd\'cd\'b4\'d9\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b0 \cf0  => \'b3\'eb\'b5\'e5\'b8\'a6 placeholer\'b7\'ce \'b8\'b8\'b5\'e9\'be\'ee \'c1\'d6\'b0\'ed feed_dict \'b7\'ce \'b0\'aa\'c0\'bb \'b3\'d1\'b0\'dc\'c1\'d8\'b4\'d9\
\
a = tf.placeholder(tf.float32)\
b = tf.placeholder(tf.\'c5\'b8\'c0\'d4)\
adder_node = a+b\
print(sess.run(adder_node, feed_dict=\{a: 3, b: 4.5\}))\
print(sess.run(adder_node, feed_dict=\{a: [3,4], b: [4,5]\})) => \'b0\'aa\'c0\'ba array\'b5\'b5 \'b0\'a1\'b4\'c9\
\'c0\'cc\'b6\'a7 \'b0\'aa \'c1\'f6\'c1\'a4\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b \cf0 Tensor \'b4\'c2 rank, shapes, types\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b0 \cf0 1) rank\
Rank \
0			a=123\
1		a=[1,2,3]\
2			a = [[1,2],[3,4]]\
n\
\
2) shapes : \'b0\'a2\'b0\'a2 element\'bf\'a1 \'b8\'ee\'b0\'b3 \'b5\'e9\'be\'ee\'c0\'d6\'b4\'c2\'c1\'f6\
T = [3,4] => [D0,D1] \'b6\'c7\'b4\'c2 (0 1)\
T = [[1,2,3],[4,5,6]] => (2 3) \'b6\'c7\'b4\'c2 [2,3]\
\
3) types\
tf.float32 \'c1\'a9 \'b8\'b9\'c0\'cc \'bb\'e7\'bf\'eb\
tf.int32 \'b1\'d7 \'b4\'d9\'c0\'bd \'b8\'b9\'c0\'cc \'bb\'e7\'bf\'eb\
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs48 \cf0 2. Linear Regression \'c0\'c7 \'b0\'b3\'b3\'e4\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs32 \cf0 \
x_train = [1,2,3]\
y_train = [1,2,3]\
\
H(x) = Wx + b\
W = tf.Variable(tf.random_normal([1]), name = \'a1\'aeweight\'a1\'af\
b = tf.Variable(tf.random_normal(shape\'c0\'bb \'c1\'d6\'b8\'e9 \'b5\'ca), name=\'a1\'aebias\'a1\'af\
hypothesis = x_train * W + b\
\
\pard\pardeftab720\sl340\partightenfactor0
\cf4 \expnd0\expndtw0\kerning0
Cost = tf.reduce_mean(tf.square(hypothesis - y_train))\

\b *reduce_mean => \'c6\'f2\'b1\'d5 \'b3\'bb\'c1\'d6\'b4\'c2 \'b0\'cd\
*square -> \'c1\'a6\'b0\'f6\

\b0 \
optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.01)\
train = optimizer.minimize(cost)
\b \
\'c0\'da\'b5\'bf\'c0\'b8\'b7\'ce \'b9\'cc\'ba\'d0\'c7\'cf\'b0\'ed \'c3\'d6\'bc\'d2\'b0\'aa\

\b0 \'b9\'cc\'ba\'d0\'c7\'cf\'b0\'ed \'be\'f3\'b8\'b8\'c5\'ad \'bf\'f2\'c1\'f7\'c0\'cf\'c1\'f6 \'b0\'f6\'c7\'d1\'b4\'d9\'c0\'bd\'bf\'a1 \'bf\'f8\'b7\'a1 \'b1\'e2\'bf\'ef\'b1\'e2(W)\'bf\'a1\'bc\'ad \'b1\'d7 \'b8\'b8\'c5\'ad \'bb\'a9\'c1\'d6\'b4\'c2 \'b6\'f3\'c0\'cc\'ba\'ea\'b7\'af\'b8\'ae
\b \

\b0 learnig_rate => \'be\'f3\'b8\'b8\'c5\'ad \'bf\'f2\'c1\'f7\'c0\'cf\'c1\'f6\
\
sess = tf.Session()\
varaiable \'bb\'e7\'bf\'eb \'c0\'fc\'bf\'a1\'b4\'c2 sess.run(tf.global_variables_initalizer())\
\
for setp in range(2001):\
	sess.run(train)\
	if setp % 20 == 0:\
		print(step, sess.run(cost), sess.run(W), sess.run(b))\
\
2) placeholders\
shape = [None] \'be\'c6\'b9\'ab \'b0\'aa\'c0\'cc\'b3\'aa \'bf\'f8\'c7\'cf\'b4\'c2 \'b0\'b3\'bc\'f6\'b8\'b8\'c5\'ad\
\
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs48 \cf0 \kerning1\expnd0\expndtw0 3. Linear Regression cost \'c7\'d4\'bc\'f6 \'c3\'d6\'bc\'d2\'c8\'ad\
\pard\pardeftab720\sl340\partightenfactor0

\fs32 \cf4 \expnd0\expndtw0\kerning0
\
w\'b0\'a1 \'c7\'d4\'bc\'f6\'bf\'a1\'bc\'ad x\'b0\'aa \'c0\'cc\'b6\'f3\'b0\'ed \'c7\'d8\'be\'df\'c7\'cf\'b3\'aa\
cost\'c7\'d4\'bc\'f6\'c0\'c7 \'c3\'d6\'bc\'d2\'b0\'aa\'c0\'bb \'b0\'ae\'b4\'c2 w \'b0\'aa \'c3\'a3\'b1\'e2\
\
a.assign(b) => a \'b8\'a6 b\'b7\'ce \'be\'f7\'b5\'a5\'c0\'cc\'c6\'ae\
cost = tf.reduce_mean()\
optimizer = tf.train.GradientDescentOptimizer(learning_rate = 0.01) => \'c0\'da\'b5\'bf\'c0\'b8\'b7\'ce \'b9\'cc\'ba\'d0\'c7\'d8\'c1\'dc\
train = optimizer.minimize(cost) \
\'b9\'cc\'ba\'d0\'c7\'cf\'b0\'ed \'be\'f3\'b8\'b8\'c5\'ad \'bf\'f2\'c1\'f7\'c0\'cf\'c1\'f6 \'b0\'f6\'c7\'d1\'b4\'d9\'c0\'bd\'bf\'a1 \'bf\'f8\'b7\'a1 \'b1\'e2\'bf\'ef\'b1\'e2\'bf\'a1\'bc\'ad \'b1\'d7 \'b8\'b8\'c5\'ad \'bb\'a9\'c1\'d6\'b4\'c2 \'b6\'f3\'c0\'cc\'ba\'ea\'b7\'af\'b8\'ae\
\
+)\
gvs = optimizer.compute_gradients(cost) => cost\'c0\'c7 gradients(\'b1\'e2\'bf\'ef\'b1\'e2) \'b0\'aa\'c0\'bb \'b0\'e8\'bb\'ea \'bc\'f6\'c1\'a4\'b0\'a1\'b4\'c9\

\b *compute_gradients(cost) => cost\'c0\'c7 \'b1\'e2\'bf\'ef\'b1\'e2 \'c0\'da\'b5\'bf\'c0\'b8\'b7\'ce \'b0\'e8\'bb\'ea\

\b0 apply_gradients = optimizer.apply_gradients(gvs)\
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs48 \cf0 \kerning1\expnd0\expndtw0 4. \'bf\'a9\'b7\'af\'b0\'b3\'c0\'c7 \'c0\'d4\'b7\'c2(feature)\'c0\'c7 Linear Regression\
\pard\pardeftab720\sl340\partightenfactor0

\fs32 \cf4 \expnd0\expndtw0\kerning0
\
\'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 \'c6\'c4\'c0\'cf\'bf\'a1\'bc\'ad \'c0\'d0\'be\'ee\'bf\'c0\'b1\'e2 => 
\b import numpy as np
\b0 \
csv \'b8\'a6 \'c1\'d6\'b7\'ce \'bb\'e7\'bf\'eb\
\
\'b5\'a5\'c0\'cc\'c5\'cd\'b0\'a1 \'b8\'f0\'b5\'ce \'b0\'b0\'c0\'ba \'c5\'b8\'c0\'d4 \'c0\'cc\'be\'ee\'be\'df \'bb\'e7\'bf\'eb \'b0\'a1\'b4\'c9
\fs28 \
\pard\pardeftab720\sl280\partightenfactor0

\fs32 \cf4 \cb5 xy \cf6 =\cf4  np.loadtxt(\cf7 \'a1\'ae\'c6\'c4\'c0\'cf\'c0\'cc\'b8\'a7.csv'\cf4 , \cf8 delimiter\cf6 =\cf7 \'a1\'ae,\'a1\'af\cf4 , \cf8 dtype\cf6 =\cf4 np.float32)\
\
\'c6\'c4\'c0\'cc\'bd\'e3 \'b9\'e8\'bf\'ad slicing \'b8\'b9\'c0\'cc \'be\'b2\'c0\'d3\
\
\'c6\'c4\'c0\'cf\'c0\'cc \'b4\'f5 \'c5\'a9\'b8\'e9 Queue Runners \
\'bf\'a9\'b7\'af \'b0\'b3\'c0\'c7 \'c6\'c4\'c0\'cf\'c0\'bb \'c0\'d0\'c0\'b8\'b8\'e9 \'c5\'a5\'bf\'a1 \'c0\'fa\'c0\'e5\'c7\'cf\'b0\'ed \'b8\'ae\'b4\'f5\'b8\'a6 \'bb\'e7\'bf\'eb\'c7\'d8\'bc\'ad \'c5\'a5\'bf\'a1 \'b3\'aa\'b4\'b2\'bc\'ad \'c0\'fa\'c0\'e5\
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \cb1 filename_queue \cf6 =\cf4  tf.train.string_input_producer([\cf7 'data-01-test-score.csv\'a1\'af, \'a1\'aehi.csv\'a1\'af\cf4 ], \cf8 shuffle\cf6 =\cf9 False\cf4 , \cf8 name\cf6 =\cf7 'filename_queue'\cf4 )\
\
reader \cf6 =\cf4  tf.TextLineReader() => \'b8\'ae\'b4\'f5 \'c1\'a4\'c0\'c7 \
key, value \cf6 =\cf4  reader.read(filename_queue)\
\
record_defaults \cf6 =\cf4  [[\cf9 0\cf4 .], [\cf9 0\cf4 .], [\cf9 0\cf4 .], [\cf9 0\cf4 .]] => \'b5\'a5\'c0\'cc\'c5\'cd \'c5\'b8\'c0\'d4\'c0\'cc \'be\'ee\'b6\'bb\'b4\'d9\'b4\'c2 \'b0\'cd\'c0\'bb \'b3\'d1\'b0\'dc\'c1\'dc\
xy \cf6 =\cf4  tf.decode_csv(value, \cf8 record_defaults\cf6 =\cf4 record_defaults) => value\'b8\'a6 \'be\'ee\'b6\'bb\'b0\'d4 parsing \'c7\'d2 \'b0\'cd \'c0\'ce\'c1\'f6 
\fs24 \

\fs32 \
train_x_batch, train_y_batch \cf6 =\cf4  \\\cf10 \
\cf4     tf.train.batch([xy[\cf9 0\cf4 :\cf6 -\cf9 1\cf4 ], xy[\cf6 -\cf9 1\cf4 :]], \cf8 batch_size\cf6 =\cf9 10\cf4 ) => \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 \'c0\'d0\'be\'ee\'bf\'c3 \'bc\'f6 \'c0\'d6\'b0\'d4 \'c7\'d8\'c1\'d6\'b4\'c2 \'b0\'cd, \'b8\'ee\'b0\'b3 \'be\'bf \'b0\'a1\'c1\'ae\'bf\'c0\'b4\'c2\'c1\'f6\'b0\'a1 batch_size\
\
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs48 \cf0 \kerning1\expnd0\expndtw0 5. Logistic (Regression) Classification - 
\fs32 \cf2 \expnd0\expndtw0\kerning0
\'c1\'a4\'c8\'ae\'b5\'b5 \'b3\'f4\'c0\'ba \'be\'cb\'b0\'ed\'b8\'ae\'c1\'f2 \'bc\'d2\'b0\'b3\cf4 \
\pard\pardeftab720\sl400\partightenfactor0
\cf4 \
tf.sigmoid\
tf.cast => true = 1, false = 0\
\
predicted => \'bf\'b9\'c3\'f8 \'b0\'aa\'c0\'cc 0.5 \'ba\'b8\'b4\'d9 \'c5\'a9\'b8\'e9 1 \'c0\'db\'c0\'b8\'b8\'e9 0\
accuracy => \'c1\'a4\'c8\'ae\'b5\'b5 \'c6\'f2\'b1\'d5\
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs48 \cf0 \kerning1\expnd0\expndtw0 6. Softmax Regression (Multinomial Logistic Regression)\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs32 \cf4 \expnd0\expndtw0\kerning0
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b \cf4 hypothesis \'bf\'b9\'c3\'f8\'b0\'aa = tf.nn.softmax(tf.matmul(X,W)+b => score\'b0\'aa)\
\
softmax \'c7\'d4\'bc\'f6
\b0 \'b4\'c2 \'b3\'aa\'bf\'c0\'b4\'c2 \'b0\'e1\'b0\'fa \'b0\'aa\'b5\'e9\'c0\'bb \'c8\'ae\'b7\'fc\'b7\'ce \'b9\'d9\'b2\'e3\'c1\'dc. \'b1\'d7\'b7\'a1\'bc\'ad \'b3\'aa\'bf\'c2 \'b0\'aa\'b5\'e9\'c0\'c7 \'c3\'d1 \'c7\'d5\'c0\'ba 1\'c0\'cc \'b5\'ca
\b \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b0 \cf4 \
cost(loss) function = 	tf.reduce_mean(-tf.reduce_sum(Y * tf.log(hypothesis), axis = 1)) 	\'c7\'d5\'c0\'bb \'c7\'cf\'b0\'ed \'c6\'f2\'b1\'d5\'c0\'bb \'b3\'bd\'b4\'d9\
optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.1).minimize(cost)\
\
one-hot-encoding : \'c1\'a6\'c0\'cf \'c5\'ab \'b0\'aa\'b8\'b8 1\'b7\'ce \'c7\'cf\'b0\'ed \'b3\'aa\'b8\'d3\'c1\'f6\'b4\'c2 0\'c0\'b8\'b7\'ce \'b3\'aa\'c5\'b8\'b3\'bb\'b4\'c2 \'b0\'cd\
nb_classes => \'c5\'ac\'b7\'a1\'bd\'ba\'b0\'a1 \'b8\'ee\'b0\'b3\'c0\'ce\'b0\'a1\
\
sess.run(tf.global_variables_initializer()) \'c3\'ca\'b1\'e2\'c8\'ad\'c7\'cf\'b0\'ed \'bd\'c7\'c7\'e0\
\
tf.arg_max(a, 1) array \'c1\'d6\'b8\'e9 \'c3\'b9\'b9\'f8\'c2\'b0\'b7\'ce \'c5\'ab \'b0\'aa\'c0\'bb \'b5\'b9\'b7\'c1\'c1\'dc\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\b \cf4 softmax_cross_entropy_with_logits
\b0 \
logits = tf.matmul(X,W) + b\
hypothesis = tf.nn.softmax(logits)\
\
cost_i = t
\b f.nn.softmax_cross_entropy_with_logits
\b0 (
\b logits
\b0  = logits, 
\b labels
\b0  = y_one_hot)\
\'c7\'d7\'bb\'f3 logits\'c0\'bb \'b3\'d1\'b1\'e4\'b4\'d9\'b4\'c2 \'b0\'cd\'c0\'bb \'b1\'e2\'be\'ef!\
\'c0\'cc\'b0\'cd\'c0\'bb \'bb\'e7\'bf\'eb\'c7\'cf\'b8\'e9 \'c0\'fc\'bf\'a1 \'bd\'e8\'b4\'f8 -\'be\'ee\'c2\'bc\'b1\'b8 \'b7\'ce\'b1\'d7 \'be\'ee\'c2\'bc\'b1\'b8 \'b0\'e8\'bb\'ea\'c0\'bb \'bd\'b1\'b0\'d4 \'c7\'d2 \'bc\'f6 \'c0\'d6\'c0\'bd\
cost = tf.reduce_mean(cost_i)\
\
y_one_hot = 
\b tf.one_hot(y, nb_classes)
\b0  => 	\'b5\'a5\'c0\'cc\'c5\'cd y\'b0\'a1 \'b8\'ee\'b0\'b3\'c0\'c7 \'c5\'ac\'b7\'a1\'bd\'ba \'b0\'a1\'c1\'f6\'b0\'ed \'c0\'d6\'b4\'c2\'c1\'f6 \'be\'cb\'b7\'c1\'c1\'e0\'be\'df one_hot\'c0\'b8\'b7\'ce \'b8\'b8\'b5\'e9 \'bc\'f6 \'c0\'d6\'c0\'bd, \'c2\'f7\'bf\'f8\'c0\'cc \'c7\'d1\'b0\'b3 \'b4\'c3\'be\'ee\'b3\'b2 \'b1\'d7\'b7\'a1\'bc\'ad\
y_one_hot = 
\b tf.reshape(y_one_hot, [-1, nb_classes])
\b0  => -1\'c0\'ba \'b8\'f0\'b5\'e7\'b0\'cd\'c0\'bb \'b3\'aa\'c5\'b8\'b3\'bf, \'c5\'ac\'b7\'a1\'bd\'ba \'b0\'b3\'bc\'f6\
reshape\'c0\'b8\'b7\'ce \'b8\'c2\'c3\'e7\'c1\'e0\'be\'df \'c7\'d4\
\
w \'b4\'c2 \'c0\'d4\'b7\'c2, \'c3\'e2\'b7\'c2 \'b0\'b3\'bc\'f6\
b \'b4\'c2 \'c3\'e2\'b7\'c2\'b0\'b3\'bc\'f6\
tf.random_normal?\
\
prediction = tf.argmax(hypotheis, 1) => hypothesis\'b8\'a6 \'b7\'b9\'ba\'a7\'b7\'ce \'b9\'d9\'b2\'de. \'ba\'b8\'b1\'e2 \'c1\'df 1\'b0\'b3 \'b0\'aa\'c0\'b8\'b7\'ce\
correct_prediction = tf.equal(prediction, tf.argmax(Y_one_hot, 1))  => \'b5\'ce\'b0\'a1\'c1\'f6\'b0\'a1 \'b8\'c2\'b4\'c2\'c1\'f6 \'ba\'f1\'b1\'b3\
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) => \'bf\'b9\'c3\'f8 \'b0\'aa\'c0\'bb \'b8\'f0\'be\'c6\'bc\'ad \'c6\'f2\'b1\'d5\'c0\'bb \'b3\'bf. \'c1\'a4\'c8\'ae\'b5\'b5\
\
Cast \'c7\'d4\'bc\'f6\'b4\'c2 \'b5\'da\'bf\'a1 \'c1\'d6\'b4\'c2 \'c7\'fc\'c5\'c2\'b7\'ce \'ba\'af\'c8\'af\'c7\'d8\'c1\'dc \'bf\'a9\'b1\'e2\'bc\'ad\'b4\'c2 true = 1, false = 0 \'c0\'cc\'b7\'b8\'b0\'d4\
\
y data.flatten => [[1], [0]] \'c0\'bb \'c7\'cf\'b3\'aa\'b7\'ce. [1,0] \'c0\'cc\'b7\'b8\'b0\'d4 \'c7\'d8\'c1\'d8\'b4\'d9\
for p, y in zip (pred, y data.flatten()): => \'b0\'a2 \'b8\'ae\'bd\'ba\'c6\'ae\'b8\'a6 \'b9\'ad\'be\'ee\'bc\'ad p, y\'b7\'ce \'ba\'b8\'b3\'bd\'b4\'d9\
\
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs48 \cf0 \kerning1\expnd0\expndtw0 7. ML\'c0\'c7 \'bd\'c7\'bf\'eb\'b0\'fa \'b8\'ee\'b0\'a1\'c1\'f6 \'c6\'c1
\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf4 \
\
\'bf\'ec\'b8\'ae\'b0\'a1 \'b0\'a1\'c1\'f6\'b0\'ed \'c0\'d6\'b4\'c2 \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 training \'b0\'fa test \'b7\'ce \'b3\'aa\'b4\'ab\'b4\'d9\
prediction, accuracy\'b8\'a6 \'b3\'aa\'c5\'b8\'b3\'be \'b6\'a7\'b4\'c2 test data\'b7\'ce\
\
normalized inputs => MinMaxScaler(\'b5\'a5\'c0\'cc\'c5\'cd) \

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat5 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clmgf \clvertalt \clshdrawnil \clwWidth3723\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl200 \clpadr200 \gaph\cellx4320
\clmrg \clvertalt \clshdrawnil \clwWidth3723\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl200 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl400\partightenfactor0
\cf6 def\cf4  \cf11 MinMaxScaler\cf4 (data):\cell 
\pard\intbl\itap1\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat5 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth3723\clftsWidth3 \clminw1000 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl200 \clpadr200 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth7769\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl200 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl400\qr\partightenfactor0
\cf10 \cell 
\pard\intbl\itap1\pardeftab720\sl400\partightenfactor0
\cf4     numerator \cf6 =\cf4  data \cf6 -\cf4  np.min(data, \cf9 0\cf4 )\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat5 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth3723\clftsWidth3 \clminw1000 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl200 \clpadr200 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth7769\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl200 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl400\qr\partightenfactor0
\cf10 \cell 
\pard\intbl\itap1\pardeftab720\sl400\partightenfactor0
\cf4     denominator \cf6 =\cf4  np.max(data, \cf9 0\cf4 ) \cf6 -\cf4  np.min(data, \cf9 0\cf4 )\cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat5 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth3723\clftsWidth3 \clminw1000 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl200 \clpadr200 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth7769\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl200 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl400\qr\partightenfactor0
\cf10 \cell 
\pard\intbl\itap1\pardeftab720\sl400\partightenfactor0
\cf4     \cf12 # noise term prevents the zero division\cf4 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat5 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth3723\clftsWidth3 \clminw1000 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl200 \clpadr200 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth7769\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl200 \clpadr200 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl400\qr\partightenfactor0
\cf10 \cell 
\pard\intbl\itap1\pardeftab720\sl400\partightenfactor0
\cf4     \cf6 return\cf4  numerator \cf6 /\cf4  (denominator \cf6 +\cf4  \cf9 1e-7\cf4 )\cell \lastrow\row
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf4 \
\
\pard\pardeftab720\sl280\partightenfactor0
\cf4 \cb5 batch_xs, batch_ys \cf6 =\cf4  mnist.train.next_batch(batch_size)  \'c0\'fc\'c3\'bc \'b5\'a5\'c0\'cc\'c5\'cd set\'c0\'bb batch size \'b8\'b8\'c5\'ad \'bf\'c3\'b7\'c1\'bc\'ad \'c7\'d0\'bd\'c0\
\pard\pardeftab720\sl280\partightenfactor0
\cf4 \cb1 \'be\'f3\'b8\'b8\'c5\'ad \'b5\'b9\'c1\'f6\'b4\'c2 total_batch = int(minst.train.num_examples / batch_size)\
total_batch\'b8\'a6 \'b4\'d9 \'b5\'b9\'b8\'e9 epoch\'c7\'d1\'b9\'f8\'c0\'cc \'b3\'a1\'b3\'ad \'b0\'cd\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf4 epoch => \'c0\'fc\'c3\'bc \'b5\'a5\'c0\'cc\'c5\'cdset\'c0\'bb \'c7\'d1\'b9\'f8 \'b5\'b9\'b8\'ae\'b4\'c2 \'b0\'cd\
\'c1\'a4\'c8\'ae\'b5\'b5 \'c0\'cc\'b7\'b8\'b0\'d4 \'c7\'d2 \'bc\'f6\'b5\'b5 \'c0\'d6\'c0\'bd sess.run \'be\'c8\'c7\'cf\'b0\'ed \'c7\'cf\'b4\'c2 \'b9\'e6\'b9\'fd\
\pard\pardeftab720\sl280\partightenfactor0
\cf9 \cb5 print\cf4 (\cf7 "Accuracy: "\cf4 , accuracy.eval(\cf8 session\cf6 =\cf4 sess, \cf8 feed_dict\cf6 =\cf4 \{X: mnist.test.images, Y: mnist.test.labels\}))\cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf4 \
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs48 \cf0 \kerning1\expnd0\expndtw0 8. \'b5\'f6\'b7\'af\'b4\'d7\'c0\'c7 \'b1\'e2\'ba\'bb \'b0\'b3\'b3\'e4\'b0\'fa \'b9\'ae\'c1\'a6, \'b1\'d7\'b8\'ae\'b0\'ed \'c7\'d8\'b0\'e1\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs32 \cf4 \expnd0\expndtw0\kerning0
\
rank => []\'b0\'b3\'bc\'f6\
shape => rank\'b0\'b3\'bc\'f6\'b8\'b8\'c5\'ad \'b3\'aa\'bf\'c8 \'b0\'a1\'c0\'e5 \'be\'c8\'c2\'ca \'b0\'fd\'c8\'a3\'b7\'ce \'b5\'e9\'be\'ee\'b0\'a1\'bc\'ad \'b8\'ee\'b0\'b3\'c0\'ce\'c1\'f6 \'bc\'bc\'b0\'ed \'b3\'aa\'bf\'c0\'b8\'e9\'bc\'ad \'b1\'d7 \'b9\'ad\'c0\'ce\'b0\'d4 \'b8\'ee\'b0\'b3\'c0\'ce\'c1\'f6 \'bc\'bc\'b0\'ed \'b1\'d7\'b7\'b8\'b0\'d4 \'b0\'b3\'bc\'f6\'b8\'a6 \'c0\'fb\'c0\'bb \'8b\'9a\'b4\'c2 \'b3\'a1\'bf\'a1\'bc\'ad\'ba\'ce\'c5\'cd \'c0\'fb\'be\'ee\'be\'df \'c7\'d4 [[1],[2]] => [2,1]\
axis => \'c3\'e0. shape\'c0\'c7 \'b0\'b3\'bc\'f6\'b8\'b8\'c5\'ad 0\'ba\'ce\'c5\'cd \'bd\'c3\'c0\'db \'c1\'a9 \'b9\'d9\'b1\'f9\'c0\'cc 0 \'be\'c8\'c2\'ca\'c0\'b8\'b7\'ce \'b5\'e9\'be\'ee\'b0\'a8\
\
\'c7\'e0\'b7\'c4\'b0\'f6\'bc\'c0\'c0\'ba\
\
1)broadcasting => shape\'c0\'cc \'b4\'de\'b6\'f3\'b5\'b5 \'bf\'ac\'bb\'ea\'c0\'cc \'b0\'a1\'b4\'c9\'c7\'cf\'b0\'d4 \'c7\'d8\'c1\'dc shape\'c0\'bb \'b8\'c2\'c3\'e7\'c1\'d6\'b4\'c2,,,\
\
2)tf.argmax \'b4\'c2 \'b0\'a1\'c0\'e5 \'c5\'ab \'b0\'aa\'c0\'c7 \'c0\'a7\'c4\'a1\
\
3)tf.reshape  \'c7\'d2\'b6\'a7 \'bf\'f8\'b7\'a1 shpae\'c0\'c7 \'b0\'a1\'c0\'e5 \'b3\'a1 \'b0\'aa\'c0\'ba \'b0\'c7\'b5\'e9\'c0\'cc\'c1\'f6 \'be\'ca\'b4\'c2\'b4\'d9\
squeeze => \'c6\'ec\'c1\'d8\'b4\'d9	expand\'b4\'c2 \'c2\'c9\'b0\'b3\'c1\'d8\'b4\'d9\
\
4) tf.one_hot\
\'b0\'a1\'c0\'e5 \'c5\'ab \'b0\'aa\'b8\'b8 1\'b7\'ce \'b3\'aa\'b8\'d3\'c1\'f6 0\'c0\'b8\'b7\'ce \
\
5) tf.cast  \'c5\'b8\'c0\'d4\'c0\'bb \'c7\'cf\'b3\'aa\'b7\'ce \'c5\'eb\'c0\'cf\
\
6) tf.stack  \'b9\'e8\'bf\'ad\'c0\'bb \'be\'ee\'b6\'bb\'b0\'d4 \'bd\'d7\'c0\'bb\'c1\'f6\
\
7) tf.ones_like(\'b9\'e8\'bf\'ad\'c0\'cc\'b8\'a7).eval() \'b9\'e8\'bf\'ad\'c0\'cc\'b8\'a7\'b0\'fa \'b0\'b0\'c0\'ba \'b8\'f0\'be\'e7\'c0\'c7 \'b0\'aa\'c0\'cc \'b8\'f0\'b5\'ce 1\'c0\'ce \'b0\'c9 \'b8\'b8\'b5\'e9\'be\'ee\'c1\'dc\
\
8) tf.zeros_like(x).eval() \'c0\'cc\'b0\'c5\'b4\'c2 0\'c0\'b8\'b7\'ce \'b8\'b8\'b5\'e9\'be\'ee\'c1\'dc\
\
9) zip \'b9\'e8\'bf\'ad\'c0\'bb \'c7\'d1\'b9\'f8\'bf\'a1 \'b9\'de\'be\'c6\'bc\'ad \'c3\'b3\'b8\'ae\
for x, y in zip([1,2,3], [4,5,6]):\
\
Epoch => \'c0\'fc\'c3\'bc \'b4\'d9 \'b5\'b9\'b8\'ae\'b8\'e9 1 epoch \'c0\'fc\'c3\'bc \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 \'b8\'ee\'b9\'f8 \'b5\'b9\'b8\'ae\'b3\'c4\
Batch => \'c7\'d1\'b9\'f8\'bf\'a1 \'b5\'b9\'b8\'b1 \'b5\'a5\'c0\'cc\'c5\'cd \'c5\'a9\'b1\'e2? \'bb\'e7\'c0\'cc\'c1\'ee?\
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs48 \cf0 \kerning1\expnd0\expndtw0 9. Neural Network 1 : XOR \'b9\'ae\'c1\'a6\'bf\'cd \'c7\'d0\'bd\'c0\'b9\'e6\'b9\'fd\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs32 \cf4 \expnd0\expndtw0\kerning0
\
\
Logistic regression \'bb\'e7\'bf\'eb  \'b0\'e1\'b0\'fa\'b4\'c2 1, 0 \'c0\'cc\'b4\'cf\'b1\'ee\
\
Deep \'c7\'cf\'b0\'d4 \'bd\'d7\'b4\'c2 \'b0\'cd\'c0\'ba \'b0\'e1\'b0\'fa \'b0\'aa\'c0\'bb \'b9\'de\'be\'c6\'bf\'cd\'bc\'ad \'bf\'a9\'b7\'af\'b9\'f8 \'b0\'e8\'bb\'ea\'c7\'d1\'b4\'d9\
\
\'c1\'df\'b0\'a3\'b4\'dc\'b0\'e8 \'c3\'e2\'b7\'c2 \'b0\'b3\'bc\'f6\'b4\'c2 \'bf\'ec\'b8\'ae\'b0\'a1 \'c1\'a4\'c7\'cf\'b8\'e9 \'b5\'ca\
\
Wide NN \'c0\'ba \'c1\'df\'b0\'a3 \'c3\'e2\'b7\'c2 \'b0\'b3\'bc\'f6\'b8\'a6 \'c5\'a9\'b0\'d4 \'c1\'f6\'c1\'a4\'c7\'d8\'c1\'d6\'b4\'c2 \'b0\'c7\'b5\'a5 \'b1\'d7\'b7\'af\'b8\'e9 \'b4\'f5 \'c1\'a4\'c8\'ae\'c7\'d8\'c1\'fc\
Deep NN \'c0\'ba \'b1\'ed\'b0\'d4 \'b0\'e8\'bb\'ea\'c0\'bb \'bf\'a9\'b7\'af\'b9\'f8 \'bd\'d7\'b4\'c2 \'b0\'cd\'c0\'d3. \'bf\'aa\'bd\'c3 \'b4\'f5 \'c1\'a4\'c8\'ae\'c7\'d8\'c1\'fc\
\
\
Tensor board \
K\
\'be\'ee\'b6\'b2 \'b0\'cd \'b1\'e2\'b7\'cf\'c7\'d2\'c1\'f6\
tf.summary.histogram\
tf.summary.scaler\
\
tf.summary.merge_all()\
\
Writer = tf.summary.FileWriter(\'a1\'ae\'c6\'c4\'c0\'cf\'c0\'cc\'b8\'a7\'a1\'af)\
writer.add_graph(sess.graph) \'b1\'d7\'b7\'a1\'c7\'c1 \'c3\'df\'b0\'a1\
\
\
run\'c7\'d2 \'b6\'a7\
summary \'b8\'a6 \'b0\'b0\'c0\'cc \'bd\'c7\'c7\'e0 s \'b7\'ce \'b9\'de\'c0\'bd\
writer.add_summary(s, global_step = global_step)\
global_steop += 1\
\
Graph\'b7\'ce \'ba\'b8\'b0\'ed\'bd\'cd\'b4\'d9 \'c7\'d2 \'b6\'a7\'b4\'c2 tf.name_scope(\'a1\'b0 \'a1\'b0)as scope: \
\'c0\'cc\'b7\'b8\'b0\'d4\'c7\'cf\'b8\'e9 \'b0\'a2 \'b7\'b9\'c0\'cc\'be\'ee \'ba\'b0\'b7\'ce \'c1\'a4\'a4\'b7\'b8\'ae\'b0\'a1 \'b5\'ca\
\
\'b1\'d7\'b8\'ae\'b0\'ed  learning_rate \'bf\'a1 \'ba\'af\'c8\'ad\'b8\'a6 \'c1\'d6\'b0\'ed \'c7\'d1\'b9\'f8\'bf\'a1 \'ba\'b8\'b0\'ed\'bd\'cd\'c0\'b8\'b8\'e9 /board/1, /board/2  \'c0\'cc\'b7\'b1\'bd\'c4\'c0\'b8\'b7\'ce \'c7\'cf\'b0\'ed\
/board\'b7\'ce \'c5\'c4\'bc\'ad\'ba\'b8\'b5\'e5\'b8\'a6 \'bd\'c7\'c7\'e0\'bd\'c3\'c5\'b0\'b8\'e9 \'c7\'d1\'b4\'ab\'bf\'a1 \'ba\'f1\'b1\'b3 \'b0\'a1\'b4\'c9\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs48 \cf0 \kerning1\expnd0\expndtw0 11. CNN\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs32 \cf4 \expnd0\expndtw0\kerning0
\
\'c0\'d4\'b7\'c2\'b5\'c8 \'c0\'cc\'b9\'cc\'c1\'f6\'b8\'a6 convolution\'c0\'b8\'b7\'ce \'b0\'aa\'c0\'bb \'bb\'cc\'be\'c6\'b3\'bb\'b0\'ed subsampling \'b5\'a5\'c0\'cc\'c5\'cd\'b8\'a6 \'c1\'d9\'bf\'a9\'c1\'d6\'b0\'ed\
\'c0\'cc\'b0\'cd\'c0\'bb \'bf\'a9\'b7\'af\'b9\'f8 \'b9\'dd\'ba\'b9\'c7\'cf\'b0\'ed \'b8\'b6\'c1\'f6\'b8\'b7 \'b0\'aa\'c0\'bb classification \'b5\'ee\'c0\'b8\'b7\'ce \'b0\'e1\'b0\'fa\'b8\'a6 \'b3\'bf\
\
\'b5\'ce\'b0\'a1\'c1\'f6\'b7\'ce \'b3\'aa\'b4\'ad \'bc\'f6 \'c0\'d6\'c0\'bd convolution layer and max pooling\
\
Plit.imageshow \'b4\'c2 \'b1\'d7\'b3\'c9 \'c0\'cc\'b9\'cc\'c1\'f6 \'bd\'c3\'b0\'a2\'c8\'ad\
\
Image: 1,3,3,1  \'c3\'b3\'c0\'bd\'c0\'ba \'b8\'ee\'b0\'b3\'c0\'c7 \'c0\'cc\'b9\'cc\'c1\'f6 \'b1\'d7\'b4\'d9\'c0\'bd\'c0\'ba \'c0\'cc\'b9\'cc\'c1\'f6 \'c5\'a9\'b1\'e2 \'b1\'d7\'b4\'d9\'c0\'bd\'c0\'ba \'c4\'ae\'b6\'f3 \'b8\'b8\'be\'e0\'bf\'a1 \'c8\'e6\'b9\'e9\'c0\'cc \'be\'c6\'b4\'cf\'b8\'e9 3\'c0\'cc \'b5\'ca\
Filter : 2,2,1,1 \'c0\'cc\'b7\'b1\'bd\'c4\'c0\'ce\'b5\'a5 \'be\'d5\'bf\'a1 \'b5\'ce\'c0\'da\'b8\'ae\'b4\'c2 \'c5\'a9\'b1\'e2, \'b1\'d7 \'b4\'d9\'c0\'bd\'c0\'ba \'c4\'ae\'b6\'f3, \'b1\'d7 \'b4\'d9\'c0\'bd\'c0\'ba \'c7\'ca\'c5\'cd\'b0\'b3\'bc\'f6 = \'b8\'ee\'b9\'f8 \'c7\'cf\'b0\'da\'b5\'fb weight \'b0\'aa\'bf\'a1 \'be\'b5\'8b\'9a \'bb\'e7\'bf\'eb\
Strides = [1,2,2,1] \'b0\'a1\'bf\'ee\'b5\'a5 \'bb\'e7\'c0\'cc\'c1\'ee\'b7\'ce \'bf\'c5\'b1\'e4\'b4\'d9..? \'c0\'a7 \'be\'c6\'b7\'a1 2,2 \'b8\'b8 \'ba\'b8\'b8\'e9 \'b5\'ca\
\
tf.nn.conv2d(image, weight, strides=[1,1,1,1], padding=\'a1\'aeVALID\'a1\'af) \'c7\'cf\'b8\'e9 \'c0\'da\'b5\'bf\'c0\'b8\'b7\'ce \'c7\'d8\'c1\'dc\
\'bd\'c7\'c7\'e0\'c0\'ba conv2d_img = conv2d.eval()\
\
Padding \'bf\'c9\'bc\'c7 same => \'c7\'ca\'c5\'cd\'bf\'a1 \'c0\'fb\'bf\'eb\'c7\'d1 \'b0\'e1\'b0\'fa \'bb\'e7\'c0\'cc\'c1\'ee\'b0\'a1 \'b9\'b9\'b5\'e7\'c1\'f6 \'bf\'f8\'b7\'a1 \'c0\'cc\'b9\'cc\'c1\'f6 \'bb\'e7\'c0\'cc\'c1\'ee\'bf\'cd \'b0\'b0\'b0\'d4 \'b8\'b8\'b5\'e9\'be\'ee \'c1\'d6\'b0\'da\'b4\'d9. \'c0\'d4\'b7\'c2\'bb\'e7\'c0\'cc\'c1\'ee = \'c3\'e2\'b7\'c2\'bb\'e7\'c0\'cc\'c1\'ee \'b0\'a1 \'b5\'ca\
\
Max pooling\
\'c1\'d6\'be\'ee\'c1\'f8 \'c0\'cc\'b9\'cc\'c1\'f6\'bf\'a1 \'b4\'eb\'c7\'d8\'bc\'ad \'be\'cb\'be\'c6\'bc\'ad \'bb\'cc\'be\'c6\'c1\'dc ksize, strides, padding \'b8\'b8 \'c1\'d6\'b8\'e9 \'b5\'ca\
ksize = [1, 2, 2, 1] \'bf\'a9\'b1\'e2\'bc\'ad \'bd\'c7\'c1\'a6 \'c5\'a9\'b1\'e2\'b4\'c2 2*2\
strides = [1,2,2,1]\
\
\
\'b8\'b6\'c1\'f6\'b8\'b7\'bf\'a1\'b4\'c2 \'c2\'df \'c6\'ee\'c3\'c4\'c1\'dc \'b1\'d7\'b4\'d9\'c0\'bd fully connected (fc) \'bf\'a1 \'b3\'d6\'be\'ee\'c1\'dc\
\'bf\'f8\'b7\'a1 \'c7\'cf\'b4\'f8 softmax \'c0\'cc\'b7\'b1\'b0\'c5\
\
tf.layers.conv2d \'c7\'cf\'b8\'e9 \'c1\'bb \'b4\'f5 \'bd\'b1\'b0\'d4 \'bb\'e7\'bf\'eb \'b0\'a1\'b4\'c9\
tf.layers.dense \'b4\'c2 weight \'b0\'b9\'bc\'f6 \'b0\'e8\'bb\'ea \'be\'c8\'c7\'d8\'b5\'b5 \'b5\'ca\
\
Ensemble \'c0\'ba \'bf\'a9\'b7\'af\'b0\'b3 \'b8\'f0\'b5\'a8\'c0\'bb \'bf\'b9\'c3\'f8\'bd\'c3\'c4\'d1\'ba\'b8\'b0\'ed \'c1\'b6\'c7\'d5\'bd\'c3\'c5\'b2\'b4\'d9}